{"mappings":"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","sources":["<anon>","src/index.ts"],"sourcesContent":["var $kEX8F$codexteamicons = require(\"@codexteam/icons\");\n\n\nfunction $parcel$defineInteropFlag(a) {\n  Object.defineProperty(a, '__esModule', {value: true, configurable: true});\n}\n\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});\n}\n\n$parcel$defineInteropFlag(module.exports);\n\n$parcel$export(module.exports, \"default\", () => $eb7869949b641a40$export$2e2bcd8739ae039);\n\nclass $eb7869949b641a40$var$EditorJSInlineSpoiler {\n    static get isInline() {\n        return true;\n    }\n    static get shortcut() {\n        return \"Ctrl+Shift+S\";\n    }\n    static get sanitize() {\n        return {\n            span: true\n        };\n    }\n    static get CSS() {\n        return \"editorjs-inline-spoiler\";\n    }\n    static{\n        this.title = \"Spoiler\";\n    }\n    addInlineCSS(span) {\n        span.style.backgroundColor = \"hsla(0, 0%, 6%, 1)\";\n        span.style.padding = \"2px\";\n        span.style.cursor = \"pointer\";\n        span.style.borderRadius = \"4px\";\n    }\n    constructor({ api: api }){\n        this.api = api;\n        this.button = null;\n        this.state = false;\n    }\n    getToolIcon() {\n        return 0, $kEX8F$codexteamicons.IconHidden;\n    }\n    render() {\n        this.button = document.createElement(\"BUTTON\");\n        this.button.type = \"button\";\n        this.button.innerHTML = this.getToolIcon();\n        this.button.classList.add(this.api.styles.inlineToolButton);\n        return this.button;\n    }\n    surround(range) {\n        if (!range) return;\n        if (this.state) {\n            this.unwrap(range);\n            return;\n        }\n        this.wrap(range);\n    }\n    wrap(range) {\n        const selectedText = range.extractContents();\n        const spoiler = document.createElement(\"SPAN\");\n        spoiler.setAttribute(\"aria-label\", \"spoiler-text\");\n        spoiler.setAttribute(\"data-show\", \"false\");\n        spoiler.classList.add($eb7869949b641a40$var$EditorJSInlineSpoiler.CSS);\n        this.addInlineCSS(spoiler);\n        spoiler.addEventListener(\"mouseover\", ()=>{\n            spoiler.setAttribute(\"data-show\", \"true\");\n            spoiler.style.backgroundColor = \"hsla(0, 0%, 6%, 0.2)\";\n        });\n        spoiler.addEventListener(\"mouseleave\", ()=>{\n            spoiler.setAttribute(\"data-show\", \"false\");\n            spoiler.style.backgroundColor = \"hsla(0, 0%, 6%, 1)\";\n        });\n        spoiler.appendChild(selectedText);\n        range.insertNode(spoiler);\n        this.api.selection.expandToTag(spoiler);\n    }\n    unwrap(range) {\n        const spoiler = this.api.selection.findParentTag(\"SPAN\", $eb7869949b641a40$var$EditorJSInlineSpoiler.CSS);\n        const selectedText = range.extractContents();\n        const isEmpty = spoiler.innerHTML.length === 0;\n        if (spoiler && isEmpty) {\n            spoiler.remove();\n            range.insertNode(selectedText);\n        }\n        if (!isEmpty) range.insertNode(selectedText);\n    }\n    checkState(selection) {\n        const tag = this.api.selection.findParentTag(\"SPAN\", $eb7869949b641a40$var$EditorJSInlineSpoiler.CSS);\n        this.state = !!tag;\n        if (this.button) this.button.classList.toggle(this.api.styles.inlineToolButtonActive, this.state);\n        return this.state;\n    }\n}\nvar $eb7869949b641a40$export$2e2bcd8739ae039 = $eb7869949b641a40$var$EditorJSInlineSpoiler;\n\n\n//# sourceMappingURL=main.js.map\n","import {IconHidden} from \"@codexteam/icons\"\r\n\r\nclass EditorJSInlineSpoiler {\r\n  api        : any\r\n  button     : HTMLButtonElement | null\r\n  state      : boolean\r\n\r\n  static get isInline() {\r\n    return true\r\n  }\r\n\r\n  static get shortcut() {\r\n    return \"Ctrl+Shift+S\"\r\n  }\r\n\r\n  static get sanitize() {\r\n    return {\r\n      span: true\r\n    }\r\n  }\r\n\r\n  static get CSS() {\r\n    return \"editorjs-inline-spoiler\"\r\n  }\r\n\r\n  static title: string = \"Spoiler\"\r\n  \r\n  addInlineCSS(span: HTMLSpanElement) {\r\n    span.style.backgroundColor = \"hsla(0, 0%, 6%, 1)\"\r\n    span.style.padding         = \"2px\"\r\n    span.style.cursor          = \"pointer\"\r\n    span.style.borderRadius    = \"4px\"\r\n  }\r\n\r\n  constructor({ api }) {\r\n    this.api    = api\r\n    this.button = null\r\n    this.state  = false\r\n  }\r\n\r\n  getToolIcon(): string {\r\n    return IconHidden\r\n  }\r\n\r\n  render() {\r\n    this.button           = document.createElement(\"BUTTON\") as HTMLButtonElement\r\n    this.button.type      = \"button\"\r\n    this.button.innerHTML = this.getToolIcon()\r\n    this.button.classList.add(this.api.styles.inlineToolButton)\r\n\r\n    return this.button\r\n  }\r\n\r\n  surround(range: Range) {\r\n    if (!range) {\r\n      return\r\n    }\r\n\r\n    if (this.state) {\r\n      this.unwrap(range)\r\n      return\r\n    }\r\n\r\n    this.wrap(range)\r\n  }\r\n\r\n  wrap(range: Range) {\r\n    const selectedText = range.extractContents()\r\n    const spoiler      = document.createElement(\"SPAN\")\r\n\r\n    spoiler.setAttribute(\"aria-label\", \"spoiler-text\")\r\n    spoiler.setAttribute(\"data-show\", \"false\")\r\n    spoiler.classList.add(EditorJSInlineSpoiler.CSS)\r\n    this.addInlineCSS(spoiler)\r\n\r\n    spoiler.addEventListener(\"mouseover\", () => {\r\n      spoiler.setAttribute(\"data-show\", \"true\")\r\n      spoiler.style.backgroundColor = \"hsla(0, 0%, 6%, 0.2)\"\r\n    })\r\n\r\n    spoiler.addEventListener(\"mouseleave\", () => {\r\n      spoiler.setAttribute(\"data-show\", \"false\")\r\n      spoiler.style.backgroundColor = \"hsla(0, 0%, 6%, 1)\"\r\n    })\r\n\r\n    spoiler.appendChild(selectedText)\r\n    range.insertNode(spoiler)\r\n\r\n    this.api.selection.expandToTag(spoiler)\r\n  }\r\n\r\n  unwrap(range: Range) {\r\n    const spoiler      = this.api.selection.findParentTag(\"SPAN\", EditorJSInlineSpoiler.CSS)\r\n    const selectedText = range.extractContents()\r\n\r\n    const isEmpty = spoiler.innerHTML.length === 0\r\n\r\n    if (spoiler && isEmpty) {\r\n      spoiler.remove()\r\n      range.insertNode(selectedText)\r\n    }\r\n\r\n    if (!isEmpty) {\r\n      range.insertNode(selectedText)\r\n    }\r\n  }\r\n\r\n  checkState(selection: Selection) {\r\n    const tag = this.api.selection.findParentTag(\"SPAN\", EditorJSInlineSpoiler.CSS)\r\n\r\n    this.state = !!tag\r\n\r\n    if (this.button) {\r\n      this.button.classList.toggle(this.api.styles.inlineToolButtonActive, this.state)\r\n    }\r\n\r\n    return this.state\r\n  }\r\n}\r\n\r\nexport default EditorJSInlineSpoiler"],"names":["$kEX8F$codexteamicons","require","$parcel$defineInteropFlag","a","Object","defineProperty","value","configurable","$parcel$export","e","n","v","s","get","set","enumerable","module","exports","$eb7869949b641a40$export$2e2bcd8739ae039","$eb7869949b641a40$var$EditorJSInlineSpoiler","isInline","shortcut","sanitize","span","CSS","title","addInlineCSS","style","backgroundColor","padding","cursor","borderRadius","constructor","api","button","state","getToolIcon","IconHidden","render","document","createElement","type","innerHTML","classList","add","styles","inlineToolButton","surround","range","unwrap","wrap","selectedText","extractContents","spoiler","setAttribute","addEventListener","appendChild","insertNode","selection","expandToTag","findParentTag","isEmpty","length","remove","checkState","tag","toggle","inlineToolButtonActive"],"version":3,"file":"main.js.map"}
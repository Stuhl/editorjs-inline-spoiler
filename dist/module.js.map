{"mappings":";;;AAEA,MAAM;IAKJ,WAAW,WAAW;QACpB,OAAO;IACT;IAEA,WAAW,WAAW;QACpB,OAAO;IACT;IAEA,WAAW,WAAW;QACpB,OAAO;YACL,MAAM;QACR;IACF;IAEA,WAAW,MAAM;QACf,OAAO;IACT;;aAEO,QAAgB;;IAEvB,aAAa,IAAqB,EAAE;QAClC,KAAK,KAAK,CAAC,eAAe,GAAG;IAC/B;IAEA,YAAY,OAAE,GAAG,EAAE,CAAE;QACnB,IAAI,CAAC,GAAG,GAAM;QACd,IAAI,CAAC,MAAM,GAAG;QACd,IAAI,CAAC,KAAK,GAAI;IAChB;IAEA,cAAsB;QACpB,OAAO,GAAA;IACT;IAEA,SAAS;QACP,IAAI,CAAC,MAAM,GAAa,SAAS,aAAa,CAAC;QAC/C,IAAI,CAAC,MAAM,CAAC,IAAI,GAAQ;QACxB,IAAI,CAAC,MAAM,CAAC,SAAS,GAAG,IAAI,CAAC,WAAW;QACxC,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,gBAAgB;QAE1D,OAAO,IAAI,CAAC,MAAM;IACpB;IAEA,SAAS,KAAY,EAAE;QACrB,IAAI,CAAC,OACH;QAGF,IAAI,IAAI,CAAC,KAAK,EAAE;YACd,IAAI,CAAC,MAAM,CAAC;YACZ;QACF;QAEA,IAAI,CAAC,IAAI,CAAC;IACZ;IAEA,KAAK,KAAY,EAAE;QACjB,MAAM,eAAe,MAAM,eAAe;QAC1C,MAAM,UAAe,SAAS,aAAa,CAAC;QAE5C,QAAQ,SAAS,CAAC,GAAG,CAAC,4CAAsB,GAAG;QAC/C,IAAI,CAAC,YAAY,CAAC;QAElB,QAAQ,WAAW,CAAC;QACpB,MAAM,UAAU,CAAC;QAEjB,IAAI,CAAC,GAAG,CAAC,SAAS,CAAC,WAAW,CAAC;IACjC;IAEA,OAAO,KAAY,EAAE;QACnB,MAAM,eAAe,MAAM,eAAe;QAC1C,MAAM,UAAe,IAAI,CAAC,GAAG,CAAC,SAAS,CAAC,aAAa,CAAC,QAAQ,4CAAsB,GAAG;QAEvF,IAAI,SAAS;YACX,QAAQ,MAAM;YACd,MAAM,UAAU,CAAC;QACnB;IACF;IAEA,WAAW,SAAoB,EAAE;QAC/B,MAAM,MAAM,IAAI,CAAC,GAAG,CAAC,SAAS,CAAC,aAAa,CAAC,QAAQ,4CAAsB,GAAG;QAE9E,IAAI,CAAC,KAAK,GAAG,CAAC,CAAC;QAEf,IAAI,IAAI,CAAC,MAAM,EACb,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,sBAAsB,EAAE,IAAI,CAAC,KAAK;QAGjF,OAAO,IAAI,CAAC,KAAK;IACnB;AACF;IAEA,2CAAe","sources":["src/index.ts"],"sourcesContent":["import {IconHidden} from \"@codexteam/icons\"\r\n\r\nclass EditorJSInlineSpoiler {\r\n  api        : any\r\n  button     : HTMLButtonElement | null\r\n  state      : boolean\r\n\r\n  static get isInline() {\r\n    return true\r\n  }\r\n\r\n  static get shortcut() {\r\n    return \"Ctrl+Shift+S\"\r\n  }\r\n\r\n  static get sanitize() {\r\n    return {\r\n      span: true\r\n    }\r\n  }\r\n\r\n  static get CSS() {\r\n    return \"editorjs-inline-spoiler\"\r\n  }\r\n\r\n  static title: string = \"Hotkey\"\r\n  \r\n  addInlineCSS(span: HTMLSpanElement) {\r\n    span.style.backgroundColor = \"hsla(0, 0%, 6%, 1)\"\r\n  }\r\n\r\n  constructor({ api }) {\r\n    this.api    = api\r\n    this.button = null\r\n    this.state  = false\r\n  }\r\n\r\n  getToolIcon(): string {\r\n    return IconHidden\r\n  }\r\n\r\n  render() {\r\n    this.button           = document.createElement(\"BUTTON\") as HTMLButtonElement\r\n    this.button.type      = \"button\"\r\n    this.button.innerHTML = this.getToolIcon()\r\n    this.button.classList.add(this.api.styles.inlineToolButton)\r\n\r\n    return this.button\r\n  }\r\n\r\n  surround(range: Range) {\r\n    if (!range) {\r\n      return\r\n    }\r\n\r\n    if (this.state) {\r\n      this.unwrap(range)\r\n      return\r\n    }\r\n\r\n    this.wrap(range)\r\n  }\r\n\r\n  wrap(range: Range) {\r\n    const selectedText = range.extractContents()\r\n    const spoiler      = document.createElement(\"SPAN\")\r\n\r\n    spoiler.classList.add(EditorJSInlineSpoiler.CSS)\r\n    this.addInlineCSS(spoiler)\r\n\r\n    spoiler.appendChild(selectedText)\r\n    range.insertNode(spoiler)\r\n\r\n    this.api.selection.expandToTag(spoiler)\r\n  }\r\n\r\n  unwrap(range: Range) {\r\n    const selectedText = range.extractContents()\r\n    const spoiler      = this.api.selection.findParentTag(\"SPAN\", EditorJSInlineSpoiler.CSS)\r\n\r\n    if (spoiler) {\r\n      spoiler.remove()\r\n      range.insertNode(selectedText)\r\n    }\r\n  }\r\n\r\n  checkState(selection: Selection) {\r\n    const tag = this.api.selection.findParentTag(\"SPAN\", EditorJSInlineSpoiler.CSS)\r\n\r\n    this.state = !!tag\r\n\r\n    if (this.button) {\r\n      this.button.classList.toggle(this.api.styles.inlineToolButtonActive, this.state)\r\n    }\r\n\r\n    return this.state\r\n  }\r\n}\r\n\r\nexport default EditorJSInlineSpoiler"],"names":[],"version":3,"file":"module.js.map","sourceRoot":"../"}